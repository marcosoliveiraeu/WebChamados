{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\GitHub\\\\WebChamados\\\\WebChamados\\\\React\\\\chamadosreact\\\\src\\\\components\\\\UserContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [tokenExpired, setTokenExpired] = useState(false);\n\n  // Função para buscar o token do armazenamento local\n  const getTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('accessToken');\n    if (storedToken) {\n      const decodedToken = jwtDecode(storedToken);\n      return decodedToken;\n    }\n    return null;\n  };\n\n  // busca o refresh token do storage\n  const getRefreshTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('refreshToken');\n    if (storedToken) {\n      return storedToken;\n    }\n    return null;\n  };\n  useEffect(() => {\n    const checkLogin = async () => {\n      const token = getTokenFromStorage();\n      console.log(\"a\");\n      if (token) {\n        console.log(\"b\");\n        const currentTime = Date.now() / 1000;\n        if (token.exp < currentTime) {\n          console.log(\"c\");\n\n          //Se token expirado , verifica o refresh\n\n          const refreshResponse = await axios.post('https://localhost:7137/api/Usuario/Refresh', {\n            getRefreshTokenFromStorage\n          });\n          if (refreshResponse.data.flag) {\n            console.log(\"d\");\n            const {\n              accessToken: newAccessToken,\n              refreshToken: newRefreshToken\n            } = refreshResponse.data;\n            localStorage.setItem('accessToken', newAccessToken);\n            localStorage.setItem('refreshToken', newRefreshToken);\n            token = jwtDecode(newAccessToken);\n            setUser({\n              name: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n              email: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n              role: token['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n              exp: token.exp\n            });\n          } else {\n            console.log(\"e\");\n\n            // refresh token inválido\n            setUser(null);\n            setTokenExpired(true);\n          }\n        } else {\n          console.log(\"f\");\n\n          // token válido , retorna as informações\n\n          console.log(token.name);\n          console.log(token.email);\n          console.log(token.role);\n          console.log(token.exp);\n          setUser({\n            name: token.name,\n            email: token.email,\n            role: token.role,\n            exp: token.exp\n          });\n        }\n      } else {\n        console.log(\"g\");\n        // não foi encontrado token no storage\n\n        setUser(null);\n        setTokenExpired = true;\n        console.log(tokenExpired);\n      }\n    };\n    checkLogin();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      tokenExpired\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"QExyTfw3y/BBhoC9xix65+5lyuc=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","tokenExpired","setTokenExpired","getTokenFromStorage","storedToken","localStorage","getItem","decodedToken","getRefreshTokenFromStorage","checkLogin","token","console","log","currentTime","Date","now","exp","refreshResponse","post","data","flag","accessToken","newAccessToken","refreshToken","newRefreshToken","setItem","name","email","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/GitHub/WebChamados/WebChamados/React/chamadosreact/src/components/UserContext.jsx"],"sourcesContent":["\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const UserContext = createContext(); \r\n\r\nexport const UserProvider = ({ children }) => {\r\n    \r\n  const [user, setUser] = useState(null);\r\n  const [tokenExpired, setTokenExpired] = useState(false);\r\n\r\n\r\n\r\n  // Função para buscar o token do armazenamento local\r\n  const getTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('accessToken');\r\n\r\n    if (storedToken) {\r\n      const decodedToken = jwtDecode(storedToken);\r\n      return decodedToken\r\n    }\r\n\r\n    return null;\r\n    \r\n  };\r\n\r\n  // busca o refresh token do storage\r\n  const getRefreshTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('refreshToken');\r\n\r\n    if (storedToken) {      \r\n      return storedToken\r\n    }\r\n\r\n    return null;\r\n    \r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const checkLogin = async () => {\r\n    \r\n      const token = getTokenFromStorage();\r\n\r\n      console.log(\"a\");\r\n\r\n      if (token) {\r\n        \r\n        console.log(\"b\");\r\n\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        if (token.exp < currentTime) {\r\n\r\n          console.log(\"c\");\r\n          \r\n          //Se token expirado , verifica o refresh\r\n\r\n          const refreshResponse = await axios.post('https://localhost:7137/api/Usuario/Refresh', { getRefreshTokenFromStorage, });\r\n          \r\n          if (refreshResponse.data.flag) {\r\n\r\n            console.log(\"d\");\r\n\r\n              const { accessToken: newAccessToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n              localStorage.setItem('accessToken', newAccessToken);\r\n              localStorage.setItem('refreshToken', newRefreshToken);\r\n              \r\n              token = jwtDecode(newAccessToken);\r\n              \r\n              setUser({\r\n                  name: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n                  email: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n                  role: token['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n                  exp: token.exp\r\n                });\r\n          }\r\n          else\r\n          {\r\n            \r\n            console.log(\"e\");\r\n\r\n            // refresh token inválido\r\n              setUser(null);\r\n              setTokenExpired(true);\r\n            \r\n          }\r\n          \r\n        } \r\n        else \r\n        {\r\n          console.log(\"f\");\r\n          \r\n          \r\n          // token válido , retorna as informações\r\n\r\n          console.log(token.name);\r\n          console.log(token.email);\r\n          console.log(token.role);\r\n          console.log(token.exp);\r\n\r\n          setUser({\r\n            name: token.name,\r\n            email: token.email,\r\n            role: token.role,\r\n            exp: token.exp\r\n          });\r\n        }\r\n      } \r\n      else \r\n      {\r\n        console.log(\"g\");\r\n        // não foi encontrado token no storage\r\n\r\n        setUser(null);\r\n        setTokenExpired = true ;\r\n        \r\n        \r\n        console.log(tokenExpired);\r\n\r\n      }\r\n\r\n    };\r\n\r\n    checkLogin();\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, tokenExpired }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => useContext(UserContext);\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}