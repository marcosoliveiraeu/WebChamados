{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\GitHub\\\\WebChamados\\\\WebChamados\\\\React\\\\chamadosreact\\\\src\\\\components\\\\UserContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nimport axiosInstance from '../utils/AxiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [tokenExpired, setTokenExpired] = useState(false);\n  const updateTokenExpired = expired => {\n    setTokenExpired(expired);\n  };\n  const updateUser = () => {\n    let decodedToken = getTokenFromStorage();\n    setUser({\n      name: decodedToken.name,\n      email: decodedToken.email,\n      role: decodedToken.role,\n      exp: decodedToken.exp\n    });\n  };\n\n  // Função para buscar o token do armazenamento local\n  const getTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('accessToken');\n    if (storedToken) {\n      const decodedToken = jwtDecode(storedToken);\n      return {\n        name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n        email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n        role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n        exp: decodedToken.exp\n      };\n    }\n    return null;\n  };\n\n  // busca o refresh token do storage\n  const getRefreshTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('refreshToken');\n    console.log(\"getRefreshTokenFromStorage 1\");\n    if (storedToken) {\n      console.log(\"getRefreshTokenFromStorage 2\");\n      const decodedToken = jwtDecode(storedToken);\n      return {\n        name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n        email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n        exp: decodedToken.exp\n      };\n    }\n    console.log(\"getRefreshTokenFromStorage 3\");\n    return null;\n  };\n  const checkLogin = async () => {\n    try {\n      let token = getTokenFromStorage();\n      console.log(\"a\");\n      if (token) {\n        console.log(\"b\");\n        const currentTime = Date.now() / 1000;\n        if (token.exp < currentTime) {\n          console.log(\"c\");\n          console.log(\"token.exp: \" + token.exp);\n          let refreshToken = getRefreshTokenFromStorage();\n          if (refreshToken) {\n            if (refreshToken.exp < currentTime) {\n              // refresh expirado , precisa fazer login novamente\n              console.log(\"refresh expirado , precisa fazer login novamente\");\n\n              // refresh token inválido\n              setUser(null);\n              setTokenExpired(true);\n            } else {\n              // refresh ainda dentro da data de validade\n              // busca novos tokens e role                    \n              //const refreshResponse = await axios.get('https://localhost:7137/api/Usuario/Refresh',  refreshToken );\n              /*\r\n              const refreshResponse = await axios.post(\r\n                'https://localhost:7137/api/Usuario/Refresh',\r\n                null, // Envie null como corpo da solicitação\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${refreshToken}` // Adicione o token no cabeçalho de autorização\r\n                    }\r\n                }\r\n              );\r\n              */\n              console.log(\"UserContext - antes \");\n              const refreshResponse = await axiosInstance.post('https://localhost:7137/api/Usuario/Refresh').catch(function (error) {\n                console.log(\"UserContext-axiosInstance.post.catch - \" + error);\n              });\n              console.log(\"chamada do refresh - passou\");\n              if (refreshResponse.data.flag) {\n                console.log(\"d\");\n                const {\n                  accessToken: newAccessToken,\n                  refreshToken: newRefreshToken\n                } = refreshResponse.data;\n                localStorage.setItem('accessToken', newAccessToken);\n                localStorage.setItem('refreshToken', newRefreshToken);\n                token = jwtDecode(newAccessToken);\n                setTokenExpired(false);\n                setUser({\n                  name: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n                  email: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n                  role: token['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n                  exp: token.exp\n                });\n              } else {\n                console.log(\"e\");\n\n                // refresh token inválido\n                setUser(null);\n                setTokenExpired(true);\n              }\n            }\n          } else {\n            console.log(\"refresh token não encontrado\");\n\n            // refresh token não encontrado\n            setUser(null);\n            setTokenExpired(true);\n          }\n        } else {\n          console.log(\"f\");\n\n          // token válido , retorna as informações\n\n          console.log(token.name);\n          console.log(token.email);\n          console.log(token.role);\n          console.log(token.exp);\n          setTokenExpired(false);\n          setUser({\n            name: token.name,\n            email: token.email,\n            role: token.role,\n            exp: token.exp\n          });\n        }\n      } else {\n        console.log(\"g\");\n        // não foi encontrado token no storage\n\n        setUser(null);\n        setTokenExpired(true);\n        console.log(tokenExpired);\n      }\n    } catch (error) {\n      console.log(\"catch : \");\n      console.error(\"Refresh token failed\", error);\n      setUser(null);\n      setTokenExpired(true);\n    }\n  };\n  useEffect(() => {\n    console.log(\"UserContext useEffect\");\n\n    //checkLogin();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      tokenExpired,\n      updateTokenExpired,\n      updateUser,\n      checkLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"QExyTfw3y/BBhoC9xix65+5lyuc=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","axios","axiosInstance","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","tokenExpired","setTokenExpired","updateTokenExpired","expired","updateUser","decodedToken","getTokenFromStorage","name","email","role","exp","storedToken","localStorage","getItem","getRefreshTokenFromStorage","console","log","checkLogin","token","currentTime","Date","now","refreshToken","refreshResponse","post","catch","error","data","flag","accessToken","newAccessToken","newRefreshToken","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/GitHub/WebChamados/WebChamados/React/chamadosreact/src/components/UserContext.jsx"],"sourcesContent":["\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport axiosInstance from '../utils/AxiosInstance';\r\n\r\nexport const UserContext = createContext(); \r\n\r\nexport const UserProvider = ({ children }) => {\r\n    \r\n  const [user, setUser] = useState(null);\r\n  const [tokenExpired, setTokenExpired] = useState(false);\r\n\r\n\r\n  const updateTokenExpired = (expired) => {\r\n    setTokenExpired(expired);\r\n  };\r\n\r\n  const updateUser = () => {\r\n    \r\n    let decodedToken = getTokenFromStorage();\r\n    \r\n    setUser({\r\n      name: decodedToken.name,\r\n      email: decodedToken.email,\r\n      role: decodedToken.role,\r\n      exp: decodedToken.exp\r\n      });\r\n  };\r\n\r\n  // Função para buscar o token do armazenamento local\r\n  const getTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('accessToken');\r\n\r\n    if (storedToken) {\r\n      const decodedToken = jwtDecode(storedToken);\r\n      return {\r\n        name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n        email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n        role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n        exp: decodedToken.exp\r\n      }\r\n    }\r\n\r\n    return null;\r\n    \r\n  };\r\n\r\n  // busca o refresh token do storage\r\n  const getRefreshTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('refreshToken');\r\n\r\n    console.log(\"getRefreshTokenFromStorage 1\");\r\n\r\n\r\n    if (storedToken) {    \r\n      console.log(\"getRefreshTokenFromStorage 2\");  \r\n      const decodedToken = jwtDecode(storedToken);\r\n      return {\r\n        name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n        email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n        exp: decodedToken.exp\r\n      }\r\n    }\r\n\r\n    console.log(\"getRefreshTokenFromStorage 3\");\r\n    return null;\r\n    \r\n  };\r\n\r\n\r\n\r\n  const checkLogin = async () => \r\n  {\r\n\r\n      try \r\n      {\r\n    \r\n        let token = getTokenFromStorage();\r\n\r\n        console.log(\"a\");\r\n\r\n        if (token) \r\n        {\r\n        \r\n          console.log(\"b\");\r\n\r\n          const currentTime = Date.now() / 1000;\r\n\r\n          if (token.exp < currentTime) \r\n          {          \r\n\r\n              console.log(\"c\");\r\n              console.log(\"token.exp: \" + token.exp);       \r\n              \r\n              let refreshToken = getRefreshTokenFromStorage() ;\r\n\r\n              if (refreshToken){\r\n\r\n                if (refreshToken.exp < currentTime) {\r\n                  // refresh expirado , precisa fazer login novamente\r\n                  console.log(\"refresh expirado , precisa fazer login novamente\");\r\n      \r\n                  // refresh token inválido\r\n                  setUser(null);\r\n                  setTokenExpired(true);                      \r\n\r\n                }\r\n                else\r\n                {\r\n\r\n          \r\n\r\n                  // refresh ainda dentro da data de validade\r\n                  // busca novos tokens e role                    \r\n                  //const refreshResponse = await axios.get('https://localhost:7137/api/Usuario/Refresh',  refreshToken );\r\n                  /*\r\n                  const refreshResponse = await axios.post(\r\n                    'https://localhost:7137/api/Usuario/Refresh',\r\n                    null, // Envie null como corpo da solicitação\r\n                    {\r\n                        headers: {\r\n                            Authorization: `Bearer ${refreshToken}` // Adicione o token no cabeçalho de autorização\r\n                        }\r\n                    }\r\n                  );\r\n                  */\r\n                  console.log(\"UserContext - antes \");\r\n\r\n                  const refreshResponse = await axiosInstance.post('https://localhost:7137/api/Usuario/Refresh')\r\n                  \r\n                  .catch(function (error) {\r\n                    console.log(\"UserContext-axiosInstance.post.catch - \" + error);\r\n\r\n                  });\r\n              \r\n                  console.log(\"chamada do refresh - passou\");\r\n                \r\n                  if (refreshResponse.data.flag) \r\n                  {\r\n\r\n                    console.log(\"d\");\r\n      \r\n                    const { accessToken: newAccessToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n                    localStorage.setItem('accessToken', newAccessToken);\r\n                    localStorage.setItem('refreshToken', newRefreshToken);\r\n                        \r\n                    token = jwtDecode(newAccessToken);\r\n      \r\n                    setTokenExpired(false)\r\n                        \r\n                    setUser({\r\n                      name: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n                      email: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n                      role: token['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n                      exp: token.exp\r\n                    });\r\n                  \r\n                  }\r\n                  else\r\n                  {\r\n                      \r\n                    console.log(\"e\");\r\n      \r\n                    // refresh token inválido\r\n                    setUser(null);\r\n                    setTokenExpired(true);\r\n                      \r\n                  }\r\n                }\r\n              }\r\n              else\r\n              {\r\n                console.log(\"refresh token não encontrado\");\r\n      \r\n                // refresh token não encontrado\r\n                setUser(null);\r\n                setTokenExpired(true);\r\n              }              \r\n            \r\n          } \r\n          else \r\n          {\r\n            console.log(\"f\");\r\n          \r\n          \r\n            // token válido , retorna as informações\r\n\r\n            console.log(token.name);\r\n            console.log(token.email);\r\n            console.log(token.role);\r\n            console.log(token.exp);\r\n          \r\n            setTokenExpired(false)\r\n\r\n            setUser({\r\n              name: token.name,\r\n              email: token.email,\r\n              role: token.role,\r\n              exp: token.exp\r\n            });\r\n          }\r\n        } \r\n        else \r\n        {\r\n          console.log(\"g\");\r\n          // não foi encontrado token no storage\r\n\r\n          setUser(null);\r\n          setTokenExpired(true) ;        \r\n        \r\n          console.log(tokenExpired);      \r\n       \r\n\r\n        }\r\n\r\n      } \r\n      catch (error) \r\n      {\r\n\r\n        console.log(\"catch : \" )\r\n\r\n        console.error(\"Refresh token failed\", error);\r\n        setUser(null);\r\n        setTokenExpired(true);\r\n      }      \r\n\r\n  };\r\n\r\n    \r\n  useEffect(() => {  \r\n    \r\n    console.log(\"UserContext useEffect\" )\r\n\r\n    //checkLogin();\r\n    \r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, tokenExpired , updateTokenExpired , updateUser , checkLogin}}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => useContext(UserContext);\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}