{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\GitHub\\\\WebChamados\\\\WebChamados\\\\React\\\\chamadosreact\\\\src\\\\components\\\\UserContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [tokenExpired, setTokenExpired] = useState(false);\n\n  // Função para buscar o token do armazenamento local\n  const getTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('accessToken');\n    if (storedToken) {\n      const decodedToken = jwtDecode(storedToken);\n      return {\n        name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n        email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n        role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n        exp: decodedToken.exp\n      };\n    }\n    return null;\n  };\n\n  // busca o refresh token do storage\n  const getRefreshTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('refreshToken');\n    console.log(\"getRefreshTokenFromStorage 1\");\n    if (storedToken) {\n      console.log(\"getRefreshTokenFromStorage 2\");\n      return storedToken;\n    }\n    console.log(\"getRefreshTokenFromStorage 3\");\n    return null;\n  };\n  useEffect(() => {\n    const checkLogin = async () => {\n      try {\n        let token = getTokenFromStorage();\n        console.log(\"a\");\n        if (token) {\n          console.log(\"b\");\n          const currentTime = Date.now() / 1000;\n          if (token.exp < currentTime) {\n            console.log(\"c\");\n            console.log(\"token.exp: \" + token.exp);\n            const refreshToken = getRefreshTokenFromStorage();\n            console.log(\"token.exp: \" + refreshToken);\n\n            //Se token expirado , verifica o refresh\n            const refreshResponse = await axios.post('https://localhost:7137/api/Usuario/Refresh', refreshToken);\n            console.log(\"c.1\");\n            console.log(refreshResponse.status);\n            console.log(refreshResponse.data.flag);\n            if (refreshResponse.data.flag) {\n              console.log(\"d\");\n              const {\n                accessToken: newAccessToken,\n                refreshToken: newRefreshToken\n              } = refreshResponse.data;\n              localStorage.setItem('accessToken', newAccessToken);\n              localStorage.setItem('refreshToken', newRefreshToken);\n              token = jwtDecode(newAccessToken);\n              setUser({\n                name: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n                email: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n                role: token['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n                exp: token.exp\n              });\n            } else {\n              console.log(\"e\");\n\n              // refresh token inválido\n              setUser(null);\n              setTokenExpired(true);\n            }\n          } else {\n            console.log(\"f\");\n\n            // token válido , retorna as informações\n\n            console.log(token.name);\n            console.log(token.email);\n            console.log(token.role);\n            console.log(token.exp);\n            setUser({\n              name: token.name,\n              email: token.email,\n              role: token.role,\n              exp: token.exp\n            });\n          }\n        } else {\n          console.log(\"g\");\n          // não foi encontrado token no storage\n\n          setUser(null);\n          setTokenExpired(true);\n          console.log(tokenExpired);\n        }\n      } catch (error) {\n        console.log(\"catch : \");\n        console.error(\"Refresh token failed\", error);\n        setUser(null);\n        setTokenExpired(true);\n      }\n    };\n    checkLogin();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      tokenExpired\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"QExyTfw3y/BBhoC9xix65+5lyuc=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","tokenExpired","setTokenExpired","getTokenFromStorage","storedToken","localStorage","getItem","decodedToken","name","email","role","exp","getRefreshTokenFromStorage","console","log","checkLogin","token","currentTime","Date","now","refreshToken","refreshResponse","post","status","data","flag","accessToken","newAccessToken","newRefreshToken","setItem","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/GitHub/WebChamados/WebChamados/React/chamadosreact/src/components/UserContext.jsx"],"sourcesContent":["\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const UserContext = createContext(); \r\n\r\nexport const UserProvider = ({ children }) => {\r\n    \r\n  const [user, setUser] = useState(null);\r\n  const [tokenExpired, setTokenExpired] = useState(false);\r\n\r\n  \r\n\r\n  // Função para buscar o token do armazenamento local\r\n  const getTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('accessToken');\r\n\r\n    if (storedToken) {\r\n      const decodedToken = jwtDecode(storedToken);\r\n      return {\r\n        name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n        email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n        role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n        exp: decodedToken.exp\r\n      }\r\n    }\r\n\r\n    return null;\r\n    \r\n  };\r\n\r\n  // busca o refresh token do storage\r\n  const getRefreshTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('refreshToken');\r\n\r\n    console.log(\"getRefreshTokenFromStorage 1\");\r\n\r\n\r\n    if (storedToken) {    \r\n      console.log(\"getRefreshTokenFromStorage 2\");  \r\n      return storedToken\r\n    }\r\n\r\n    console.log(\"getRefreshTokenFromStorage 3\");\r\n    return null;\r\n    \r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const checkLogin = async () => \r\n    {\r\n\r\n      try \r\n      {\r\n    \r\n        let token = getTokenFromStorage();\r\n\r\n        console.log(\"a\");\r\n\r\n        if (token) \r\n        {\r\n        \r\n          console.log(\"b\");\r\n\r\n          const currentTime = Date.now() / 1000;\r\n\r\n          if (token.exp < currentTime) \r\n          {          \r\n\r\n              console.log(\"c\");\r\n              console.log(\"token.exp: \" + token.exp);       \r\n              \r\n              const refreshToken = getRefreshTokenFromStorage() ;\r\n\r\n              console.log(\"token.exp: \" + refreshToken);  \r\n          \r\n              //Se token expirado , verifica o refresh\r\n              const refreshResponse = await axios.post('https://localhost:7137/api/Usuario/Refresh',  refreshToken );\r\n\r\n              console.log(\"c.1\");\r\n              console.log(refreshResponse.status)\r\n              console.log(refreshResponse.data.flag)\r\n          \r\n              if (refreshResponse.data.flag) {\r\n\r\n                console.log(\"d\");\r\n\r\n                  const { accessToken: newAccessToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n                  localStorage.setItem('accessToken', newAccessToken);\r\n                  localStorage.setItem('refreshToken', newRefreshToken);\r\n                  \r\n                  token = jwtDecode(newAccessToken);\r\n                  \r\n                  setUser({\r\n                      name: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n                      email: token['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n                      role: token['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n                      exp: token.exp\r\n                    });\r\n              }\r\n              else\r\n              {\r\n                \r\n                console.log(\"e\");\r\n\r\n                // refresh token inválido\r\n                  setUser(null);\r\n                  setTokenExpired(true);\r\n                \r\n              }\r\n            \r\n          } \r\n          else \r\n          {\r\n          console.log(\"f\");\r\n          \r\n          \r\n          // token válido , retorna as informações\r\n\r\n          console.log(token.name);\r\n          console.log(token.email);\r\n          console.log(token.role);\r\n          console.log(token.exp);\r\n\r\n          setUser({\r\n            name: token.name,\r\n            email: token.email,\r\n            role: token.role,\r\n            exp: token.exp\r\n            });\r\n          }\r\n        } \r\n        else \r\n        {\r\n          console.log(\"g\");\r\n          // não foi encontrado token no storage\r\n\r\n          setUser(null);\r\n          setTokenExpired(true) ;\r\n        \r\n        \r\n          console.log(tokenExpired);\r\n        \r\n       \r\n\r\n        }\r\n\r\n      } catch (error) \r\n      {\r\n\r\n        console.log(\"catch : \" )\r\n\r\n        console.error(\"Refresh token failed\", error);\r\n        setUser(null);\r\n        setTokenExpired(true);\r\n      }\r\n      \r\n\r\n    };\r\n\r\n    \r\n    checkLogin();\r\n    \r\n\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, tokenExpired }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => useContext(UserContext);\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}