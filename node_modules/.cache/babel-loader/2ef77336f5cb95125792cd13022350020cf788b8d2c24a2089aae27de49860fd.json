{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\GitHub\\\\WebChamados\\\\WebChamados\\\\React\\\\chamadosreact\\\\src\\\\components\\\\UserContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [tokenExpired, setTokenExpired] = useState(false);\n\n  // Função para buscar o token do armazenamento local\n  const getTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('accessToken');\n    if (storedToken) {\n      const decodedToken = jwtDecode(storedToken);\n      return decodedToken;\n    }\n    return null;\n  };\n\n  // busca o refresh token do storage\n  const getRefreshTokenFromStorage = () => {\n    const storedToken = localStorage.getItem('refreshToken');\n    if (storedToken) {\n      return storedToken;\n    }\n    return null;\n  };\n  useEffect(async () => {\n    const token = getTokenFromStorage;\n    if (token) {\n      const currentTime = Date.now() / 1000;\n      if (token.exp < currentTime) {\n        //Se token expirado , verifica o refresh\n\n        const refreshResponse = await axios.post('https://localhost:7137/api/Usuario/Refresh', {\n          getRefreshTokenFromStorage\n        });\n        if (refreshResponse.data.flag) {\n          const {\n            accessToken: newAccessToken,\n            refreshToken: newRefreshToken\n          } = refreshResponse.data;\n          localStorage.setItem('accessToken', newAccessToken);\n          localStorage.setItem('refreshToken', newRefreshToken);\n          decodedToken = jwtDecode(newAccessToken);\n          setUser({\n            name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n            email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n            role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n            exp: decodedToken.exp\n          });\n        } else {\n          // refresh token inválido\n          setUser(null);\n          setTokenExpired(true);\n        }\n      } else {\n        // token válido , retorna as informações\n\n        setUser({\n          name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n          email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n          role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n          exp: decodedToken.exp\n        });\n      }\n    } else {\n      // não foi encontrado token no storage\n\n      setUser(null);\n      setTokenExpired(true);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      tokenExpired\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"QExyTfw3y/BBhoC9xix65+5lyuc=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","axios","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","tokenExpired","setTokenExpired","getTokenFromStorage","storedToken","localStorage","getItem","decodedToken","getRefreshTokenFromStorage","token","currentTime","Date","now","exp","refreshResponse","post","data","flag","accessToken","newAccessToken","refreshToken","newRefreshToken","setItem","name","email","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/GitHub/WebChamados/WebChamados/React/chamadosreact/src/components/UserContext.jsx"],"sourcesContent":["\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    \r\n  const [user, setUser] = useState(null);\r\n  const [tokenExpired, setTokenExpired] = useState(false);\r\n\r\n\r\n\r\n  // Função para buscar o token do armazenamento local\r\n  const getTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('accessToken');\r\n\r\n    if (storedToken) {\r\n      const decodedToken = jwtDecode(storedToken);\r\n      return decodedToken\r\n    }\r\n\r\n    return null;\r\n    \r\n  };\r\n\r\n  // busca o refresh token do storage\r\n  const getRefreshTokenFromStorage = () => {\r\n    const storedToken = localStorage.getItem('refreshToken');\r\n\r\n    if (storedToken) {      \r\n      return storedToken\r\n    }\r\n\r\n    return null;\r\n    \r\n  };\r\n\r\n\r\n\r\n  useEffect(async () => {\r\n    \r\n    const token = getTokenFromStorage;\r\n\r\n    if (token) {\r\n      \r\n      const currentTime = Date.now() / 1000;\r\n\r\n      if (token.exp < currentTime) {\r\n        \r\n        //Se token expirado , verifica o refresh\r\n\r\n        const refreshResponse = await axios.post('https://localhost:7137/api/Usuario/Refresh', { getRefreshTokenFromStorage, });\r\n        \r\n        if (refreshResponse.data.flag) {\r\n            const { accessToken: newAccessToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n            localStorage.setItem('accessToken', newAccessToken);\r\n            localStorage.setItem('refreshToken', newRefreshToken);\r\n            \r\n            decodedToken = jwtDecode(newAccessToken);\r\n            \r\n            setUser({\r\n                name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n                email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n                role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n                exp: decodedToken.exp\r\n              });\r\n        }\r\n        else\r\n        {\r\n\r\n          // refresh token inválido\r\n            setUser(null);\r\n            setTokenExpired(true);\r\n           \r\n        }\r\n        \r\n      } \r\n      else \r\n      {\r\n        \r\n        // token válido , retorna as informações\r\n\r\n        setUser({\r\n          name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n          email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n          role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n          exp: decodedToken.exp\r\n        });\r\n      }\r\n    } \r\n    else \r\n    {\r\n\r\n      // não foi encontrado token no storage\r\n\r\n      setUser(null);\r\n      setTokenExpired(true);\r\n      \r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, tokenExpired }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useUser = () => useContext(UserContext);\r\n\r\n"],"mappings":";;;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAE5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAIvD;EACA,MAAMe,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEvD,IAAIF,WAAW,EAAE;MACf,MAAMG,YAAY,GAAGhB,SAAS,CAACa,WAAW,CAAC;MAC3C,OAAOG,YAAY;IACrB;IAEA,OAAO,IAAI;EAEb,CAAC;;EAED;EACA,MAAMC,0BAA0B,GAAGA,CAAA,KAAM;IACvC,MAAMJ,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAExD,IAAIF,WAAW,EAAE;MACf,OAAOA,WAAW;IACpB;IAEA,OAAO,IAAI;EAEb,CAAC;EAIDd,SAAS,CAAC,YAAY;IAEpB,MAAMmB,KAAK,GAAGN,mBAAmB;IAEjC,IAAIM,KAAK,EAAE;MAET,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;MAErC,IAAIH,KAAK,CAACI,GAAG,GAAGH,WAAW,EAAE;QAE3B;;QAEA,MAAMI,eAAe,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAC,4CAA4C,EAAE;UAAEP;QAA4B,CAAC,CAAC;QAEvH,IAAIM,eAAe,CAACE,IAAI,CAACC,IAAI,EAAE;UAC3B,MAAM;YAAEC,WAAW,EAAEC,cAAc;YAAEC,YAAY,EAAEC;UAAgB,CAAC,GAAGP,eAAe,CAACE,IAAI;UAC3FX,YAAY,CAACiB,OAAO,CAAC,aAAa,EAAEH,cAAc,CAAC;UACnDd,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAED,eAAe,CAAC;UAErDd,YAAY,GAAGhB,SAAS,CAAC4B,cAAc,CAAC;UAExCnB,OAAO,CAAC;YACJuB,IAAI,EAAEhB,YAAY,CAAC,4DAA4D,CAAC;YAChFiB,KAAK,EAAEjB,YAAY,CAAC,oEAAoE,CAAC;YACzFkB,IAAI,EAAElB,YAAY,CAAC,8DAA8D,CAAC;YAClFM,GAAG,EAAEN,YAAY,CAACM;UACpB,CAAC,CAAC;QACR,CAAC,MAED;UAEE;UACEb,OAAO,CAAC,IAAI,CAAC;UACbE,eAAe,CAAC,IAAI,CAAC;QAEzB;MAEF,CAAC,MAED;QAEE;;QAEAF,OAAO,CAAC;UACNuB,IAAI,EAAEhB,YAAY,CAAC,4DAA4D,CAAC;UAChFiB,KAAK,EAAEjB,YAAY,CAAC,oEAAoE,CAAC;UACzFkB,IAAI,EAAElB,YAAY,CAAC,8DAA8D,CAAC;UAClFM,GAAG,EAAEN,YAAY,CAACM;QACpB,CAAC,CAAC;MACJ;IACF,CAAC,MAED;MAEE;;MAEAb,OAAO,CAAC,IAAI,CAAC;MACbE,eAAe,CAAC,IAAI,CAAC;IAEvB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAE5B,IAAI;MAAEE;IAAa,CAAE;IAAAJ,QAAA,EACjDA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjC,EAAA,CArGWF,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAuGzB,OAAO,MAAMqC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM7C,UAAU,CAACM,WAAW,CAAC;AAAA;AAACuC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}