{"ast":null,"code":"import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nconst currentTime = Date.now() / 1000;\n\n// Função para buscar o token do armazenamento local\nconst accessToken = () => {\n  const storedToken = localStorage.getItem('accessToken');\n  if (storedToken) {\n    const decodedToken = jwtDecode(storedToken);\n    return {\n      name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n      email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n      role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n      isExp: decodedToken.exp < currentTime\n    };\n  }\n  return null;\n};\n\n// busca o refresh token do storage\nconst refreshToken = () => {\n  const storedToken = localStorage.getItem('refreshToken');\n  if (storedToken) {\n    const decodedToken = jwtDecode(storedToken);\n    return {\n      name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n      email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n      isExp: decodedToken.exp < currentTime\n    };\n  }\n  return null;\n};\n\n// retorna se o refresh está expirado ou não\nconst refreshExpirado = () => {\n  const refresh = refreshToken();\n  if (refresh) {\n    return resfresh.isExp;\n  }\n  return null;\n};\n\n// \nconst getNewRefreshToken = async () => {\n  const storedRefreshToken = localStorage.getItem('refreshToken');\n  const baseURL = 'https://localhost:7137/api/Usuario/Refresh';\n  const axiosInstance = axios.create({\n    baseURL,\n    headers: {\n      Authorization: `Bearer ${storedRefreshToken}`\n    }\n  });\n  axiosInstance.interceptors.request.use(async request => {\n    request.headers.Authorization = `Bearer ${storedRefreshToken}`;\n    return request;\n  });\n  const refreshResponse = await axiosInstance.post(baseURL);\n  const {\n    accessToken: newAccessToken,\n    refreshToken: newRefreshToken\n  } = refreshResponse.data;\n  localStorage.setItem('accessToken', newAccessToken);\n  localStorage.setItem('refreshToken', newRefreshToken);\n};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","axios","currentTime","Date","now","accessToken","storedToken","localStorage","getItem","decodedToken","name","email","role","isExp","exp","refreshToken","refreshExpirado","refresh","resfresh","getNewRefreshToken","storedRefreshToken","baseURL","axiosInstance","create","headers","Authorization","interceptors","request","use","refreshResponse","post","newAccessToken","newRefreshToken","data","setItem"],"sources":["C:/Users/Administrador/Documents/GitHub/WebChamados/WebChamados/React/chamadosreact/src/utils/UserToken.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n    const currentTime = Date.now() / 1000;\r\n\r\n    // Função para buscar o token do armazenamento local\r\n    const accessToken = () => {\r\n\r\n        const storedToken = localStorage.getItem('accessToken');\r\n\r\n        if (storedToken) {\r\n        const decodedToken = jwtDecode(storedToken);\r\n        return {\r\n            name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n            email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n            role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n            isExp: decodedToken.exp < currentTime\r\n        }\r\n        }\r\n\r\n        return null;\r\n    \r\n    };\r\n\r\n\r\n  \r\n  // busca o refresh token do storage\r\n    const refreshToken = () => {\r\n\r\n        const storedToken = localStorage.getItem('refreshToken');\r\n\r\n        if (storedToken) {    \r\n        const decodedToken = jwtDecode(storedToken);\r\n        return {\r\n            name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n            email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n            isExp: decodedToken.exp < currentTime\r\n        }\r\n        }\r\n\r\n        return null;\r\n    \r\n    };\r\n\r\n\r\n    // retorna se o refresh está expirado ou não\r\n    const refreshExpirado =() => {\r\n\r\n        const refresh = refreshToken();\r\n\r\n        if(refresh){\r\n            return resfresh.isExp;\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n\r\n\r\n    // \r\n    const getNewRefreshToken = async () => {\r\n\r\n        const storedRefreshToken = localStorage.getItem('refreshToken');\r\n\r\n        const baseURL = 'https://localhost:7137/api/Usuario/Refresh';\r\n\r\n        const axiosInstance = axios.create({\r\n            baseURL,\r\n            headers:{Authorization: `Bearer ${storedRefreshToken}`}\r\n        });\r\n\r\n        axiosInstance.interceptors.request.use(async (request) => {                                      \r\n            request.headers.Authorization = `Bearer ${storedRefreshToken}`;                   \r\n            return request;\r\n        });                \r\n                                \r\n        const refreshResponse = await axiosInstance.post(baseURL);\r\n                        \r\n        const { accessToken: newAccessToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n\r\n        localStorage.setItem('accessToken', newAccessToken);\r\n        localStorage.setItem('refreshToken', newRefreshToken);\r\n\r\n    };"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO;AAErB,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;;AAErC;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAEtB,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAIF,WAAW,EAAE;IACjB,MAAMG,YAAY,GAAGT,SAAS,CAACM,WAAW,CAAC;IAC3C,OAAO;MACHI,IAAI,EAAED,YAAY,CAAC,4DAA4D,CAAC;MAChFE,KAAK,EAAEF,YAAY,CAAC,oEAAoE,CAAC;MACzFG,IAAI,EAAEH,YAAY,CAAC,8DAA8D,CAAC;MAClFI,KAAK,EAAEJ,YAAY,CAACK,GAAG,GAAGZ;IAC9B,CAAC;EACD;EAEA,OAAO,IAAI;AAEf,CAAC;;AAIH;AACE,MAAMa,YAAY,GAAGA,CAAA,KAAM;EAEvB,MAAMT,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAExD,IAAIF,WAAW,EAAE;IACjB,MAAMG,YAAY,GAAGT,SAAS,CAACM,WAAW,CAAC;IAC3C,OAAO;MACHI,IAAI,EAAED,YAAY,CAAC,4DAA4D,CAAC;MAChFE,KAAK,EAAEF,YAAY,CAAC,oEAAoE,CAAC;MACzFI,KAAK,EAAEJ,YAAY,CAACK,GAAG,GAAGZ;IAC9B,CAAC;EACD;EAEA,OAAO,IAAI;AAEf,CAAC;;AAGD;AACA,MAAMc,eAAe,GAAEA,CAAA,KAAM;EAEzB,MAAMC,OAAO,GAAGF,YAAY,CAAC,CAAC;EAE9B,IAAGE,OAAO,EAAC;IACP,OAAOC,QAAQ,CAACL,KAAK;EACzB;EAEA,OAAO,IAAI;AACf,CAAC;;AAID;AACA,MAAMM,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAEnC,MAAMC,kBAAkB,GAAGb,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAE/D,MAAMa,OAAO,GAAG,4CAA4C;EAE5D,MAAMC,aAAa,GAAGrB,KAAK,CAACsB,MAAM,CAAC;IAC/BF,OAAO;IACPG,OAAO,EAAC;MAACC,aAAa,EAAG,UAASL,kBAAmB;IAAC;EAC1D,CAAC,CAAC;EAEFE,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOD,OAAO,IAAK;IACtDA,OAAO,CAACH,OAAO,CAACC,aAAa,GAAI,UAASL,kBAAmB,EAAC;IAC9D,OAAOO,OAAO;EAClB,CAAC,CAAC;EAEF,MAAME,eAAe,GAAG,MAAMP,aAAa,CAACQ,IAAI,CAACT,OAAO,CAAC;EAEzD,MAAM;IAAEhB,WAAW,EAAE0B,cAAc;IAAEhB,YAAY,EAAEiB;EAAgB,CAAC,GAAGH,eAAe,CAACI,IAAI;EAE3F1B,YAAY,CAAC2B,OAAO,CAAC,aAAa,EAAEH,cAAc,CAAC;EACnDxB,YAAY,CAAC2B,OAAO,CAAC,cAAc,EAAEF,eAAe,CAAC;AAEzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}