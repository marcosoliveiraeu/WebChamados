{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Documents\\\\GitHub\\\\WebChamados\\\\WebChamados\\\\React\\\\chamadosreact\\\\src\\\\components\\\\PrivateRoute.jsx\";\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { accessToken, refreshValido, getNewRefreshToken } from '../utils/UserToken';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = () => {\n  let isAuthenticated = false;\n  let token = accessToken();\n  if (token) {\n    //se existir um token no storage      \n\n    if (token.isExp) {\n      //se o access token do storage est치 expirado   \n\n      if (refreshValido()) {\n        // se o refresh for v치lido            \n\n        //busca novos tokens usando o refresh token\n        getNewRefreshToken();\n        token = accessToken();\n        isAuthenticated = true;\n      }\n    } else {\n      isAuthenticated = true;\n    }\n  }\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 28\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 41\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","accessToken","refreshValido","getNewRefreshToken","jsxDEV","_jsxDEV","PrivateRoute","isAuthenticated","token","isExp","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/Administrador/Documents/GitHub/WebChamados/WebChamados/React/chamadosreact/src/components/PrivateRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport {accessToken , refreshValido , getNewRefreshToken} from '../utils/UserToken';\r\n\r\nconst PrivateRoute = () => {\r\n  let isAuthenticated = false;\r\n\r\n  let token = accessToken();\r\n\r\n  if(token){\r\n    //se existir um token no storage      \r\n    \r\n        if(token.isExp){\r\n        //se o access token do storage est치 expirado   \r\n            \r\n            if(refreshValido()){\r\n            // se o refresh for v치lido            \r\n            \r\n              //busca novos tokens usando o refresh token\r\n                getNewRefreshToken();\r\n                token = accessToken();\r\n\r\n                isAuthenticated = true;\r\n            }        \r\n\r\n        }\r\n        else\r\n        {\r\n          isAuthenticated = true;\r\n        }\r\n  }\r\n\r\n  return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAAQC,WAAW,EAAGC,aAAa,EAAGC,kBAAkB,QAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpF,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,IAAIC,eAAe,GAAG,KAAK;EAE3B,IAAIC,KAAK,GAAGP,WAAW,CAAC,CAAC;EAEzB,IAAGO,KAAK,EAAC;IACP;;IAEI,IAAGA,KAAK,CAACC,KAAK,EAAC;MACf;;MAEI,IAAGP,aAAa,CAAC,CAAC,EAAC;QACnB;;QAEE;QACEC,kBAAkB,CAAC,CAAC;QACpBK,KAAK,GAAGP,WAAW,CAAC,CAAC;QAErBM,eAAe,GAAG,IAAI;MAC1B;IAEJ,CAAC,MAED;MACEA,eAAe,GAAG,IAAI;IACxB;EACN;EAEA,OAAOA,eAAe,gBAAGF,OAAA,CAACL,MAAM;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGR,OAAA,CAACN,QAAQ;IAACe,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChE,CAAC;AAACE,EAAA,GA7BIT,YAAY;AA+BlB,eAAeA,YAAY;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}