{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\nconst currentTime = Date.now() / 1000;\nconst verificaAutenticacao = () => {\n  let token = accessToken();\n  if (token) {\n    if (token.isExp) {\n      if (refreshValido()) {\n        getNewRefreshToken();\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n};\n\n// Função para buscar o token do armazenamento local\nconst accessToken = () => {\n  const storedToken = localStorage.getItem('accessToken');\n  if (storedToken) {\n    const decodedToken = jwtDecode(storedToken);\n    return {\n      name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n      email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n      role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\n      isExp: decodedToken.exp < currentTime\n    };\n  }\n  return null;\n};\n\n// busca o refresh token do storage\nconst refreshToken = () => {\n  const storedToken = localStorage.getItem('refreshToken');\n  if (storedToken) {\n    const decodedToken = jwtDecode(storedToken);\n    return {\n      name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n      email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\n      isExp: decodedToken.exp < currentTime\n    };\n  }\n  return null;\n};\n\n// retorna se o refresh está expirado ou não\nconst refreshValido = () => {\n  const refresh = refreshToken();\n  if (refresh) {\n    return !refresh.isExp ? true : false;\n  }\n  return null;\n};\nconst isAdmin = () => {\n  const token = accessToken();\n  if (token) {\n    return token.role === \"Admin\" ? true : false;\n  }\n  return false;\n};\n\n// \nconst getNewRefreshToken = async () => {\n  try {\n    const storedRefreshToken = localStorage.getItem('refreshToken');\n    const baseURL = 'https://localhost:7137/api/Usuario/Refresh';\n    const axiosInstance = axios.create({\n      baseURL,\n      headers: {\n        Authorization: `Bearer ${storedRefreshToken}`\n      }\n    });\n    axiosInstance.interceptors.request.use(async request => {\n      request.headers.Authorization = `Bearer ${storedRefreshToken}`;\n      return request;\n    });\n    const refreshResponse = await axiosInstance.post(baseURL);\n    const {\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    } = refreshResponse.data;\n    localStorage.setItem('accessToken', newAccessToken);\n    localStorage.setItem('refreshToken', newRefreshToken);\n  } catch (error) {\n    console.log(\"UserToken.getNewRefreshToken - erro: \" + error);\n  }\n};\nexport { accessToken, refreshToken, refreshValido, getNewRefreshToken, isAdmin, verificaAutenticacao };","map":{"version":3,"names":["jwtDecode","axios","currentTime","Date","now","verificaAutenticacao","token","accessToken","isExp","refreshValido","getNewRefreshToken","storedToken","localStorage","getItem","decodedToken","name","email","role","exp","refreshToken","refresh","isAdmin","storedRefreshToken","baseURL","axiosInstance","create","headers","Authorization","interceptors","request","use","refreshResponse","post","newAccessToken","newRefreshToken","data","setItem","error","console","log"],"sources":["C:/Users/Administrador/Documents/GitHub/WebChamados/WebChamados/React/chamadosreact/src/utils/UserToken.js"],"sourcesContent":["\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n    const currentTime = Date.now() / 1000;\r\n\r\n\r\n    const verificaAutenticacao = () => {\r\n        \r\n        let token = accessToken();\r\n\r\n        if(token){\r\n\r\n            if(token.isExp){\r\n\r\n                if(refreshValido()){\r\n                    getNewRefreshToken();\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return true;\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Função para buscar o token do armazenamento local\r\n    const accessToken = () => {\r\n\r\n        const storedToken = localStorage.getItem('accessToken');\r\n\r\n        if (storedToken) {\r\n        const decodedToken = jwtDecode(storedToken);\r\n        return {\r\n            name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n            email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n            role: decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'],\r\n            isExp: decodedToken.exp < currentTime\r\n        }\r\n        }\r\n\r\n        return null;\r\n    \r\n    };\r\n\r\n\r\n  \r\n  // busca o refresh token do storage\r\n    const refreshToken = () => {\r\n\r\n        const storedToken = localStorage.getItem('refreshToken');\r\n\r\n        if (storedToken) {    \r\n        const decodedToken = jwtDecode(storedToken);\r\n        return {\r\n            name: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\r\n            email: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'],\r\n            isExp: decodedToken.exp < currentTime\r\n        }\r\n        }\r\n\r\n        return null;\r\n    \r\n    };\r\n\r\n\r\n    // retorna se o refresh está expirado ou não\r\n    const refreshValido =() => {\r\n\r\n        const refresh = refreshToken();\r\n\r\n        if(refresh){\r\n             return (!refresh.isExp) ? true : false;\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n\r\n    const isAdmin =() => {\r\n\r\n        const token = accessToken();\r\n\r\n        if(token){\r\n            return (token.role === \"Admin\" ? true : false)\r\n        }\r\n\r\n        return false\r\n\r\n    }\r\n\r\n\r\n\r\n    // \r\n    const getNewRefreshToken = async () => {\r\n\r\n        try{\r\n\r\n            const storedRefreshToken = localStorage.getItem('refreshToken');\r\n\r\n            const baseURL = 'https://localhost:7137/api/Usuario/Refresh';\r\n\r\n            const axiosInstance = axios.create({\r\n                baseURL,\r\n                headers:{Authorization: `Bearer ${storedRefreshToken}`}\r\n            });\r\n\r\n            axiosInstance.interceptors.request.use(async (request) => {                                      \r\n                request.headers.Authorization = `Bearer ${storedRefreshToken}`;                   \r\n                return request;\r\n            });                \r\n                                    \r\n            const refreshResponse = await axiosInstance.post(baseURL);\r\n                            \r\n            const { accessToken: newAccessToken, refreshToken: newRefreshToken } = refreshResponse.data;\r\n\r\n            localStorage.setItem('accessToken', newAccessToken);\r\n            localStorage.setItem('refreshToken', newRefreshToken);\r\n\r\n        }catch(error){\r\n            \r\n            console.log(\"UserToken.getNewRefreshToken - erro: \" + error)\r\n        }\r\n\r\n    };\r\n\r\n\r\n    export { accessToken, refreshToken, refreshValido, getNewRefreshToken , isAdmin , verificaAutenticacao};"],"mappings":"AACA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO;AAErB,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;AAGrC,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAE/B,IAAIC,KAAK,GAAGC,WAAW,CAAC,CAAC;EAEzB,IAAGD,KAAK,EAAC;IAEL,IAAGA,KAAK,CAACE,KAAK,EAAC;MAEX,IAAGC,aAAa,CAAC,CAAC,EAAC;QACfC,kBAAkB,CAAC,CAAC;QACpB,OAAO,IAAI;MACf,CAAC,MAAI;QACD,OAAO,KAAK;MAChB;IACJ,CAAC,MAED;MACI,OAAO,IAAI;IACf;EAEJ,CAAC,MAED;IACI,OAAO,KAAK;EAChB;AAEJ,CAAC;;AAGD;AACA,MAAMH,WAAW,GAAGA,CAAA,KAAM;EAEtB,MAAMI,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAIF,WAAW,EAAE;IACjB,MAAMG,YAAY,GAAGd,SAAS,CAACW,WAAW,CAAC;IAC3C,OAAO;MACHI,IAAI,EAAED,YAAY,CAAC,4DAA4D,CAAC;MAChFE,KAAK,EAAEF,YAAY,CAAC,oEAAoE,CAAC;MACzFG,IAAI,EAAEH,YAAY,CAAC,8DAA8D,CAAC;MAClFN,KAAK,EAAEM,YAAY,CAACI,GAAG,GAAGhB;IAC9B,CAAC;EACD;EAEA,OAAO,IAAI;AAEf,CAAC;;AAIH;AACE,MAAMiB,YAAY,GAAGA,CAAA,KAAM;EAEvB,MAAMR,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAExD,IAAIF,WAAW,EAAE;IACjB,MAAMG,YAAY,GAAGd,SAAS,CAACW,WAAW,CAAC;IAC3C,OAAO;MACHI,IAAI,EAAED,YAAY,CAAC,4DAA4D,CAAC;MAChFE,KAAK,EAAEF,YAAY,CAAC,oEAAoE,CAAC;MACzFN,KAAK,EAAEM,YAAY,CAACI,GAAG,GAAGhB;IAC9B,CAAC;EACD;EAEA,OAAO,IAAI;AAEf,CAAC;;AAGD;AACA,MAAMO,aAAa,GAAEA,CAAA,KAAM;EAEvB,MAAMW,OAAO,GAAGD,YAAY,CAAC,CAAC;EAE9B,IAAGC,OAAO,EAAC;IACN,OAAQ,CAACA,OAAO,CAACZ,KAAK,GAAI,IAAI,GAAG,KAAK;EAC3C;EAEA,OAAO,IAAI;AACf,CAAC;AAGD,MAAMa,OAAO,GAAEA,CAAA,KAAM;EAEjB,MAAMf,KAAK,GAAGC,WAAW,CAAC,CAAC;EAE3B,IAAGD,KAAK,EAAC;IACL,OAAQA,KAAK,CAACW,IAAI,KAAK,OAAO,GAAG,IAAI,GAAG,KAAK;EACjD;EAEA,OAAO,KAAK;AAEhB,CAAC;;AAID;AACA,MAAMP,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAEnC,IAAG;IAEC,MAAMY,kBAAkB,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAE/D,MAAMU,OAAO,GAAG,4CAA4C;IAE5D,MAAMC,aAAa,GAAGvB,KAAK,CAACwB,MAAM,CAAC;MAC/BF,OAAO;MACPG,OAAO,EAAC;QAACC,aAAa,EAAG,UAASL,kBAAmB;MAAC;IAC1D,CAAC,CAAC;IAEFE,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOD,OAAO,IAAK;MACtDA,OAAO,CAACH,OAAO,CAACC,aAAa,GAAI,UAASL,kBAAmB,EAAC;MAC9D,OAAOO,OAAO;IAClB,CAAC,CAAC;IAEF,MAAME,eAAe,GAAG,MAAMP,aAAa,CAACQ,IAAI,CAACT,OAAO,CAAC;IAEzD,MAAM;MAAEhB,WAAW,EAAE0B,cAAc;MAAEd,YAAY,EAAEe;IAAgB,CAAC,GAAGH,eAAe,CAACI,IAAI;IAE3FvB,YAAY,CAACwB,OAAO,CAAC,aAAa,EAAEH,cAAc,CAAC;IACnDrB,YAAY,CAACwB,OAAO,CAAC,cAAc,EAAEF,eAAe,CAAC;EAEzD,CAAC,QAAMG,KAAK,EAAC;IAETC,OAAO,CAACC,GAAG,CAAC,uCAAuC,GAAGF,KAAK,CAAC;EAChE;AAEJ,CAAC;AAGD,SAAS9B,WAAW,EAAEY,YAAY,EAAEV,aAAa,EAAEC,kBAAkB,EAAGW,OAAO,EAAGhB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}